#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : enable

layout(location = 0) rayPayloadEXT bool hitPayload;

layout(binding = 1, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 2, set = 0, rgba8) uniform image2D storageImage;
layout(binding = 0, set = 0) uniform CameraData {
	mat4 projection;
	mat4 view;
	float near;
	float far;
} camera;

/*
 * Utility function to get the new ray direction with a minor offset used for subpixel
 * jitter.
 */
vec3 getRayDirection(in float offset) {
    const vec2 pixel = gl_LaunchIDEXT.xy + offset;
    const vec2 inUV = pixel / gl_LaunchSizeEXT.xy;
    const vec2 d = inUV * 2.0 - 1.0;
    const vec4 target = inverse(camera.projection) * vec4(d.x, d.y, 1.0, 1.0);
    return (inverse(camera.view) * vec4(normalize(target.xyz), 0.0)).xyz;
}

void main() {
	vec3 rayOrigin = vec3(inverse(camera.view) * vec4(0, 0, 0, 1));
	vec3 rayDirection = getRayDirection(0.0);

	hitPayload = false;
	traceRayEXT(tlas, gl_RayFlagsNoneEXT, 0xFF, 0, 0, 0, rayOrigin, camera.near, rayDirection, camera.far, 0);

	if (hitPayload) {
		imageStore(storageImage, ivec2(gl_LaunchIDEXT.xy), vec4(1.0, 1.0, 0.0, 1.0));
	} else {
		imageStore(storageImage, ivec2(gl_LaunchIDEXT.xy), vec4(0.1529, 0.1529, 0.1529, 1.0));
	}
}
